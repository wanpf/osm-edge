/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openservicemesh/osm/pkg/apis/plugin/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PluginServiceLister helps list PluginServices.
// All objects returned here must be treated as read-only.
type PluginServiceLister interface {
	// List lists all PluginServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PluginService, err error)
	// PluginServices returns an object that can list and get PluginServices.
	PluginServices(namespace string) PluginServiceNamespaceLister
	PluginServiceListerExpansion
}

// pluginServiceLister implements the PluginServiceLister interface.
type pluginServiceLister struct {
	indexer cache.Indexer
}

// NewPluginServiceLister returns a new PluginServiceLister.
func NewPluginServiceLister(indexer cache.Indexer) PluginServiceLister {
	return &pluginServiceLister{indexer: indexer}
}

// List lists all PluginServices in the indexer.
func (s *pluginServiceLister) List(selector labels.Selector) (ret []*v1alpha1.PluginService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PluginService))
	})
	return ret, err
}

// PluginServices returns an object that can list and get PluginServices.
func (s *pluginServiceLister) PluginServices(namespace string) PluginServiceNamespaceLister {
	return pluginServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PluginServiceNamespaceLister helps list and get PluginServices.
// All objects returned here must be treated as read-only.
type PluginServiceNamespaceLister interface {
	// List lists all PluginServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PluginService, err error)
	// Get retrieves the PluginService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PluginService, error)
	PluginServiceNamespaceListerExpansion
}

// pluginServiceNamespaceLister implements the PluginServiceNamespaceLister
// interface.
type pluginServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PluginServices in the indexer for a given namespace.
func (s pluginServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PluginService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PluginService))
	})
	return ret, err
}

// Get retrieves the PluginService from the indexer for a given namespace and name.
func (s pluginServiceNamespaceLister) Get(name string) (*v1alpha1.PluginService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pluginservice"), name)
	}
	return obj.(*v1alpha1.PluginService), nil
}
